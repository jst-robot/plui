{"version":3,"sources":["components/Page.tsx","mock/index.ts","pages/Dashboard.tsx","components/ExperimentStatusIcon.tsx","pages/ExperimentDetail.tsx","pages/ExperimentList.tsx","pages/NewExperiment.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","title","flexGrow","link","color","textDecoration","Page","props","classes","AppBar","position","Toolbar","Typography","variant","className","to","Box","Button","IconButton","Add","Paper","elevation","children","getDevices","a","item","localStorage","getItem","JSON","parse","getDevice","query","devices","match","filter","name","length","updateDevices","getExperiments","experiments","map","cap","time","jobs","device","status","setItem","stringify","getExperiment","id","updateExperiments","Promise","experiment","now","Date","submit","start","end","all","addExperiment","data","before","after","clearExperiments","removeItem","Dashboard","useState","setDevices","useEffect","then","handler","setInterval","clearInterval","Container","maxWidth","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","StatusIcon","queue","icon","faPaperPlane","run","faSpinner","pulse","error","faExclamationCircle","done","faCheckCircle","ExperimentStatusIcon","console","log","ExperimentDetail","setExperiment","experiment_id","Card","CardContent","toLocaleString","tableRow","cursor","ExperimentList","history","useHistory","setExperiments","handleClear","onClick","hover","push","select","minWidth","NewExperiment","useForm","control","handleSubmit","errors","formState","Grid","container","spacing","xs","defaultValue","rules","required","render","field","TextField","label","fullWidth","helperText","InputLabel","Select","labelId","MenuItem","value","FormHelperText","App","basename","process","path","exact","parseInt","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b1630d7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  AppBar,\n  Box,\n  Button,\n  createStyles,\n  IconButton,\n  makeStyles,\n  Paper,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\n\nexport type PageProps = {\n  children?: React.ReactNode;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n    },\n    link: {\n      color: \"white\",\n      \"&:hover\": {\n        color: \"white\",\n        textDecoration: \"none\",\n      },\n    },\n  })\n);\n\nexport const Page = (props: PageProps) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\" className={classes.title}>\n            <Link to=\"/\" className={classes.link}>\n              PLUI\n            </Link>\n          </Typography>\n          <Box>\n            <Button>\n              <Link to=\"/experiments\" className={classes.link}>\n                実験一覧\n              </Link>\n            </Button>\n          </Box>\n          <Box>\n            <IconButton color=\"inherit\">\n              <Link to=\"/experiments/new\" className={classes.link}>\n                <Add />\n              </Link>\n            </IconButton>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      <Paper elevation={0}>\n        <div>{props.children}</div>\n      </Paper>\n    </div>\n  );\n};\n","import { Device, Experiment } from \"./types\";\n\nexport const initDevices = () => {\n  const devices: Device[] = [\n    {\n      name: \"プリンタ１\",\n      cap: 10,\n      jobs: 0,\n      time: 5,\n    },\n    {\n      name: \"プリンタ２\",\n      cap: 5,\n      jobs: 0,\n      time: 10,\n    },\n    {\n      name: \"大判プリンタ\",\n      cap: 1,\n      jobs: 0,\n      time: 60,\n    },\n  ];\n  localStorage.setItem(\"devices\", JSON.stringify(devices));\n};\n\nexport const getDevices = async (): Promise<Device[]> => {\n  const item = localStorage.getItem(\"devices\");\n  return item === null ? [] : (JSON.parse(item) as Device[]);\n};\n\nexport const getDevice = async (query: string): Promise<Device | null> => {\n  const devices = await getDevices();\n  const match = devices.filter(({ name }) => name === query);\n  return match.length === 0 ? null : match[0];\n};\n\nexport const updateDevices = async (): Promise<void> => {\n  const experiments = await getExperiments();\n  const devices = (await getDevices()).map(({ name, cap, time }) => ({\n    name,\n    cap,\n    jobs: experiments.filter(\n      ({ device, status }) => device === name && status === \"run\"\n    ).length,\n    time,\n  }));\n  localStorage.setItem(\"devices\", JSON.stringify(devices));\n};\n\nexport const getExperiments = async (): Promise<Experiment[]> => {\n  const item = localStorage.getItem(\"experiments\");\n  return item === null ? [] : (JSON.parse(item) as Experiment[]);\n};\n\nexport const getExperiment = async (\n  query: number\n): Promise<Experiment | null> => {\n  const experiments = await getExperiments();\n  const match = experiments.filter(({ id }) => id === query);\n  return match.length === 0 ? null : match[0];\n};\n\nexport const updateExperiments = async (): Promise<void> => {\n  const experiments = await Promise.all(\n    (await getExperiments()).map(\n      async (experiment): Promise<Experiment> => {\n        const now = Date.now();\n\n        if (now - experiment.submit < 2000) {\n          return { ...experiment, status: \"queue\" };\n        }\n\n        const device = await getDevice(experiment.device);\n\n        if (device === null) {\n          return { ...experiment, status: \"error\" };\n        }\n\n        if (experiment.status === \"queue\") {\n          if (device.jobs < device.cap) {\n            return { ...experiment, start: now, status: \"run\" };\n          }\n          return experiment;\n        }\n\n        if (experiment.status === \"run\" && experiment.start) {\n          if (now - experiment.start < device.time * 1000) {\n            return experiment;\n          }\n          return { ...experiment, end: now, status: \"done\" };\n        }\n\n        if (experiment.status === \"done\") {\n        }\n\n        return experiment;\n      }\n    )\n  );\n  localStorage.setItem(\"experiments\", JSON.stringify(experiments));\n};\n\nexport const addExperiment = async (\n  name: string,\n  device: string,\n  data?: Record<string, string | number | File>\n) => {\n  const before = await getExperiments();\n  const after = [\n    {\n      id: before.length,\n      name,\n      device,\n      submit: Date.now(),\n      start: null,\n      end: null,\n      status: \"queue\",\n    },\n    ...before,\n  ];\n  localStorage.setItem(\"experiments\", JSON.stringify(after));\n};\n\nexport const clearExperiments = async (): Promise<void> => {\n  localStorage.removeItem(\"experiments\");\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { Page } from \"components/Page\";\nimport { getDevices } from \"mock\";\nimport { Device } from \"mock/types\";\n\nimport {\n  Container,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\n\nexport const Dashboard = () => {\n  const [devices, setDevices] = useState<Device[]>([]);\n\n  useEffect(() => {\n    getDevices().then(setDevices);\n    const handler = setInterval(() => getDevices().then(setDevices), 1000);\n    return () => clearInterval(handler);\n  }, []);\n\n  return (\n    <Page>\n      <Container maxWidth=\"md\">\n        <Paper>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>名前</TableCell>\n                  <TableCell>状態</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {devices.map(({ name, cap, jobs }) => (\n                  <TableRow key={name}>\n                    <TableCell>\n                      <Typography>{name}</Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography>\n                        {jobs}/{cap}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      </Container>\n    </Page>\n  );\n};\n\nexport default Dashboard;\n","import React, { ReactElement } from \"react\";\n\nimport { Status } from \"mock/types\";\n\nimport {\n  faCheckCircle,\n  faPaperPlane,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faExclamationCircle,\n  faSpinner,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst StatusIcon: { [key in Status]: ReactElement } = {\n  queue: <FontAwesomeIcon icon={faPaperPlane} />,\n  run: <FontAwesomeIcon icon={faSpinner} pulse />,\n  error: <FontAwesomeIcon icon={faExclamationCircle} />,\n  done: <FontAwesomeIcon icon={faCheckCircle} />,\n};\n\ninterface ExperimentStatusIconProps {\n  status: Status;\n}\n\nexport const ExperimentStatusIcon = (props: ExperimentStatusIconProps) => {\n  console.log(props.status);\n  return StatusIcon[props.status];\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ExperimentStatusIcon } from \"components/ExperimentStatusIcon\";\nimport { Page } from \"components/Page\";\nimport { getExperiment } from \"mock\";\nimport { Experiment } from \"mock/types\";\n\nimport { Card, CardContent, Container, Typography } from \"@material-ui/core\";\n\ninterface ExperimentDetailProps {\n  experiment_id: number;\n}\n\nexport const ExperimentDetail = (props: ExperimentDetailProps) => {\n  const [experiment, setExperiment] = useState<Experiment | null>(null);\n\n  useEffect(() => {\n    getExperiment(props.experiment_id).then(setExperiment);\n    const handler = setInterval(() => {\n      getExperiment(props.experiment_id).then(setExperiment);\n    }, 1000);\n    return () => clearInterval(handler);\n  }, [props.experiment_id]);\n\n  if (experiment === null) {\n    return <Page>Not found</Page>;\n  }\n\n  return (\n    <Page>\n      <Container maxWidth=\"md\">\n        <Card>\n          <CardContent>\n            <Typography color=\"textSecondary\">\n              送信： {new Date(experiment.submit).toLocaleString()}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              開始：\n              {experiment.start && new Date(experiment.start).toLocaleString()}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              終了：\n              {experiment.end && new Date(experiment.end).toLocaleString()}\n            </Typography>\n            <Typography variant=\"h6\">{experiment.name}</Typography>\n            <Typography>{experiment.device}</Typography>\n            <ExperimentStatusIcon status={experiment.status} />\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n};\n\nexport default ExperimentDetail;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nimport { ExperimentStatusIcon } from \"components/ExperimentStatusIcon\";\nimport { Page } from \"components/Page\";\nimport { clearExperiments, getExperiments } from \"mock\";\nimport { Experiment } from \"mock/types\";\n\nimport {\n  Button,\n  Container,\n  createStyles,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tableRow: {\n      cursor: \"pointer\",\n    },\n  })\n);\n\nexport const ExperimentList = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const [experiments, setExperiments] = useState<Experiment[]>([]);\n\n  useEffect(() => {\n    getExperiments().then(setExperiments);\n    const handler = setInterval(() => {\n      getExperiments().then(setExperiments);\n    }, 1000);\n    return () => clearInterval(handler);\n  }, []);\n\n  const handleClear = async () => {\n    await clearExperiments();\n    getExperiments().then(setExperiments);\n  };\n\n  return (\n    <Page>\n      <Container maxWidth=\"md\">\n        <Paper>\n          <Toolbar>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\n              全削除\n            </Button>\n          </Toolbar>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>送信</TableCell>\n                  <TableCell>開始</TableCell>\n                  <TableCell>終了</TableCell>\n                  <TableCell>実験名</TableCell>\n                  <TableCell>機器名</TableCell>\n                  <TableCell>実行状態</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {experiments.map(\n                  ({ id, name, device, submit, start, end, status }) => (\n                    <TableRow\n                      key={id}\n                      hover={true}\n                      className={classes.tableRow}\n                      onClick={() => history.push(`/experiments/${id}`)}\n                    >\n                      <TableCell>\n                        <Typography color=\"textSecondary\">\n                          {new Date(submit).toLocaleString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography color=\"textSecondary\">\n                          {start && new Date(start).toLocaleString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography color=\"textSecondary\">\n                          {end && new Date(end).toLocaleString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"subtitle1\">{name}</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"subtitle1\">{device}</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <ExperimentStatusIcon status={status} />\n                      </TableCell>\n                    </TableRow>\n                  )\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      </Container>\n    </Page>\n  );\n};\n\nexport default ExperimentList;\n","import React from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\n\nimport { Page } from \"components/Page\";\nimport { addExperiment } from \"mock\";\n\nimport {\n  Button,\n  Container,\n  createStyles,\n  FormHelperText,\n  Grid,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\n\ninterface NewExperimentProps {}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    select: {\n      minWidth: 120,\n    },\n  });\n});\n\ntype Inputs = {\n  name: string;\n  device: string;\n};\n\nexport const NewExperiment = (props: NewExperimentProps) => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<Inputs>();\n\n  const onSubmit = ({ name, device }: Inputs) => {\n    addExperiment(name, device);\n    history.push(\"/experiments\");\n  };\n\n  return (\n    <Page>\n      <Container maxWidth=\"sm\">\n        <Paper>\n          <Container>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Controller\n                  name=\"name\"\n                  control={control}\n                  defaultValue=\"\"\n                  rules={{ required: true }}\n                  render={({ field }) => (\n                    <TextField\n                      label=\"実験名\"\n                      fullWidth\n                      error={\"name\" in errors}\n                      helperText={\"name\" in errors ? \"必須項目\" : \"\"}\n                      {...field}\n                    />\n                  )}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <InputLabel error={\"device\" in errors} id=\"device-label\">\n                  機器名\n                </InputLabel>\n                <Controller\n                  name=\"device\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field }) => (\n                    <Select\n                      labelId=\"device-label\"\n                      error={\"device\" in errors}\n                      className={classes.select}\n                      {...field}\n                    >\n                      <MenuItem value=\"プリンタ１\">プリンタ１</MenuItem>\n                      <MenuItem value=\"プリンタ２\">プリンタ２</MenuItem>\n                      <MenuItem value=\"大判プリンタ\">大判プリンタ</MenuItem>\n                    </Select>\n                  )}\n                />\n                <FormHelperText error={\"device\" in errors}>\n                  {\"device\" in errors ? \"必須項目\" : \"\"}\n                </FormHelperText>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleSubmit(onSubmit)}\n                >\n                  送信\n                </Button>\n              </Grid>\n            </Grid>\n          </Container>\n        </Paper>\n      </Container>\n    </Page>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Page } from \"components/Page\";\nimport { initDevices, updateDevices, updateExperiments } from \"mock\";\nimport Dashboard from \"pages/Dashboard\";\nimport ExperimentDetail from \"pages/ExperimentDetail\";\nimport ExperimentList from \"pages/ExperimentList\";\nimport { NewExperiment } from \"pages/NewExperiment\";\n\nimport { Container } from \"@material-ui/core\";\n\nexport const App = () => {\n  useEffect(() => {\n    initDevices();\n    const handler = setInterval(async () => {\n      await updateExperiments();\n      await updateDevices();\n    }, 500);\n    return () => clearInterval(handler);\n  });\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Dashboard />\n        </Route>\n        <Route path=\"/experiments\" exact>\n          <ExperimentList />\n        </Route>\n        <Route path=\"/experiments/new\" exact>\n          <NewExperiment />\n        </Route>\n        <Route\n          path=\"/experiments/:experiment_id\"\n          render={({ match }) => (\n            <ExperimentDetail\n              experiment_id={parseInt(match.params.experiment_id)}\n            />\n          )}\n        />\n        <Route path=\"*\">\n          <Page>\n            <Container maxWidth=\"sm\">404: Page not found.</Container>\n          </Page>\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"sanitize.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}